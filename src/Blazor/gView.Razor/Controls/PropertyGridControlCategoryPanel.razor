@using System.Reflection
@using System.ComponentModel
@using gView.GraphicsEngine

@inherits BaseHandler
@inject IEnumerable<IPropertyGridEditor> Editors;
@inject IApplicationScopeFactory AppScopeFactory

@if(Properties is not null)
{
    <table class="gview-property-grid">
        @foreach (var propertyInfo in Properties.Keys)
        {
            var browsableAttribute = propertyInfo.GetCustomAttribute<BrowsableAttribute>();
            if (browsableAttribute?.Browsable == false)
            {
                continue;
            }
            var displayNameAttribute = propertyInfo.GetCustomAttribute<DisplayNameAttribute>();
            var propertyName = String.IsNullOrEmpty(displayNameAttribute?.DisplayName)
                                    ? propertyInfo.Name
                                    : displayNameAttribute.DisplayName;

            if(!String.IsNullOrEmpty(NamePrefix))
            {
                propertyName = $"{NamePrefix}{propertyName}";
            }

            var propDesc =
                propertyInfo.GetCustomAttribute<PropertyDescriptionAttribute>()
                ?? new PropertyDescriptionAttribute();

            if (propDesc.BrowsableRule != null)
            {
                var rule = Activator.CreateInstance(propDesc.BrowsableRule) as IBrowsableRule;
                if (rule?.BrowsableFor(propertyInfo, Instance) == false)
                {
                    continue;
                }
            }

            <tr>
                @if (Properties[propertyInfo] is null 
                   && propDesc.DefaultInitializaionType is not null)
                {
                    <td colspan="2">
                        <MudText Typo="Typo.body1">@propertyName</MudText>
                        <MudButton Variant="Variant.Filled"
                                    OnClick="() => PropertyChanged(propertyInfo, Activator.CreateInstance(propDesc.DefaultInitializaionType))">
                            @($"No {propertyName}: Create {propDesc.DefaultInitializaionType.Name.SplitCamelCase()}".TruncateWithEllipsis(38))
                        </MudButton>
                    </td>
                }
                else if ((Editors.FirstEditorOrNull(propertyInfo.PropertyType) 
                         ?? Editors.FirstEditorOrNull(propDesc?.EditorPropertyType)) is IPropertyGridEditAsync editor)
                {
                    <td colspan="2">
                        <MudText Typo="Typo.body1">@propertyName</MudText>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="() => ShowEditor(editor, propertyInfo)">
                            Edit: @Properties[propertyInfo]?.ToString()?.SplitCamelCase(24)
                        </MudButton>

                        @if (propDesc?.AllowNull == true)
                        {
                            <MudChip Icon="@Icons.Material.Filled.Dangerous" T="string"
                                     IconColor="Color.Error"
                                     Style="float:right"
                                     OnClick="() => PropertyChanged(propertyInfo, null)">No @propertyName</MudChip>
                        }
                    </td>
                }
                else if (Editors.FirstEditorOrNull(propertyInfo.PropertyType) is IPropertyGridInlineEditor inlineEditor)
                {
                    inlineEditor.SetInstance(propertyInfo.GetValue(Instance));
                    <td colspan="2">
                        <MudText Typo="Typo.body1">@propertyName</MudText>
                        <PropertyGridControlCategoryPanel Instance="inlineEditor"
                                                          Properties="inlineEditor.InstanceProperties()"
                                                          OnPropertyChanged="(pInfo) => OnInlineEditorPropertyChanged(propertyInfo, inlineEditor, pInfo)"
                                                          NamePrefix="@($"{propertyName}.")"/>
                    </td>
                }
                else 
                {
                    <td style="padding-right:8px;white-space:nowrap">
                        <MudText Typo="Typo.body1">@propertyName</MudText>
                    </td>
                    <td style="width:100%">
                        @if (Properties[propertyInfo] is not null)
                        {
                            @if (propertyInfo.CanWrite == false)
                            {
                                <MudTextField T="string" ReadOnly=true
                                              Value="Properties[propertyInfo]?.ToString()"
                                              ValueChanged="(val) => PropertyChanged(propertyInfo, val)">

                                </MudTextField>
                            }
                            else if (propertyInfo.PropertyType == typeof(short))
                            {
                                <MudNumericField T="short" Variant="Variant.Text"
                                              Value="(short)(Properties[propertyInfo] ?? 0)"
                                              ValueChanged="(val) => PropertyChanged(propertyInfo, val)"
                                              Immediate="false"
                                              Step="1">
                                </MudNumericField>
                            }
                            else if (propertyInfo.PropertyType == typeof(int))
                            {
                                <MudNumericField T="int" Variant="Variant.Text"
                                              Value="(int)(Properties[propertyInfo] ?? 0)"
                                              ValueChanged="(val) => PropertyChanged(propertyInfo, val)"
                                              Immediate="false"
                                              Step="1">
                                </MudNumericField>
                            }
                            else if (propertyInfo.PropertyType == typeof(long))
                            {
                                <MudNumericField T="long" Variant="Variant.Text"
                                              Value="(long)(Properties[propertyInfo] ?? 0)"
                                              ValueChanged="(val) => PropertyChanged(propertyInfo, val)"
                                              Immediate="false"
                                              Step="1">
                                </MudNumericField>
                            }
                            else if (propertyInfo.PropertyType == typeof(byte))
                            {
                                <MudNumericField T="byte" Variant="Variant.Text"
                                              Value="(byte)(Properties[propertyInfo] ?? 0)"
                                              ValueChanged="(val) => PropertyChanged(propertyInfo, val)"
                                              Immediate="false"
                                              Step="1">
                                </MudNumericField>
                            }
                            else if (propertyInfo.PropertyType == typeof(float))
                            {
                                if(propDesc?.Range is (float min, float max, float step, string format) range) 
                                {
                                    <MudSlider T="float"
                                               Min="range.min" Max="range.max"
                                               Step="step"
                                               Value="(float)(Properties[propertyInfo] ?? 0f)"
                                               ValueChanged="(val) => PropertyChanged(propertyInfo, val)">
                                        @String.Format(format, (float?)(Properties[propertyInfo] ?? 0f))
                                    </MudSlider>
                                }
                                else
                                {
                                    <MudNumericField T="float" Variant="Variant.Text"
                                                  Value="(float)(Properties[propertyInfo] ?? 0f)"
                                                  ValueChanged="(val) => PropertyChanged(propertyInfo, val)"
                                                  Format="#.00" Culture="@_en" Immediate="false"
                                                  Step="1">
                                    </MudNumericField>
                                }
                            }
                            else if (propertyInfo.PropertyType == typeof(double))
                            {
                                <MudNumericField T="double" Variant="Variant.Text"
                                              Value="(double)(Properties[propertyInfo] ?? 0D)"
                                              ValueChanged="(val) => PropertyChanged(propertyInfo, val)"
                                              Format="#.00000" Culture="@_en" Immediate="false"
                                              Step="0.1">
                                </MudNumericField>
                            }
                            else if (propertyInfo.PropertyType == typeof(ArgbColor))
                            {
                                <ColorSelectorButton ArgbColor="(ArgbColor)Properties[propertyInfo]!"
                                ArgbColorChanged="(col) => PropertyChanged(propertyInfo, col)" />
                            }
                            else if (propertyInfo.PropertyType.IsEnum)
                            {
                                var multiSelect = propertyInfo.PropertyType.IsFlagsEnum();

                                <MudSelect T="object" Value="Properties[propertyInfo]!"
                                           MultiSelection="multiSelect"
                                           SelectedValues="multiSelect ? propertyInfo.PropertyType.EnumsToHashset((int)Properties[propertyInfo]!) : null"
                                           SelectedValuesChanged="(val) => PropertyChanged(propertyInfo, val)">
                                    @foreach (var enumValue in Enum.GetValues(propertyInfo.PropertyType))
                                    {
                                        <MudSelectItem Value="enumValue">@enumValue.ToString()?.SplitCamelCase()</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else if (propertyInfo.PropertyType == typeof(bool))
                            {
                                <MudCheckBox T="bool" Value="(bool)Properties[propertyInfo]!"
                                             ValueChanged="(check) => PropertyChanged(propertyInfo, check)" />
                            }
                            else if(!String.IsNullOrEmpty(propDesc?.SelectOptionsPropertyName))
                            {
                                var optionsProperty = Instance.GetType().GetProperty(propDesc.SelectOptionsPropertyName);
                                var options = optionsProperty?.GetValue(Instance) as IEnumerable<string>;

                                if(options is not null)
                                {
                                    <MudSelect T="string"
                                               Value="Properties[propertyInfo]?.ToString()"
                                               ValueChanged="(val) => PropertyChanged(propertyInfo, val)">
                                        @GvUtilities.StringsToSelectItems(options)
                                    </MudSelect>
                                }
                            }
                            else
                            {
                                <MudTextField T="string" Variant="Variant.Text"
                                              Value="Properties[propertyInfo]?.ToString()"
                                              ValueChanged="(val) => PropertyChanged(propertyInfo, val)">

                                </MudTextField>
                            }

                            if (propDesc?.AllowNull == true)
                            {
                                <MudChip Icon="@Icons.Material.Filled.Dangerous" T="string"
                                         IconColor="Color.Error"
                                         Style="float:right"
                                         OnClick="() => PropertyChanged(propertyInfo, null)">No @propertyName</MudChip>
                            }
                        }
                    </td>
                }
            </tr>
        }
    </table>
}

@code  {
    [Parameter] public object Instance { get; set; } = new object();
    [Parameter] public EventCallback<PropertyInfo> OnPropertyChanged { get; set; }
    [Parameter] public Dictionary<PropertyInfo, object?>? Properties { get; set; }
    [Parameter] public string NamePrefix { get; set; } = string.Empty;

    private System.Globalization.CultureInfo _en = System.Globalization.CultureInfo.GetCultureInfo("en-US");

    private Task ShowEditor(IPropertyGridEditAsync editor, PropertyInfo propertyInfo) => HandleAsync(async () =>
    {
        var newValue = await editor.EditAsync(AppScopeFactory, Instance, propertyInfo);

        if (newValue != null)
        {
            propertyInfo.SetValue(Instance, newValue);

            await OnPropertyChanged.InvokeAsync(propertyInfo);
        }
    });

    private Task OnInlineEditorPropertyChanged(PropertyInfo originalPropertyInfo, 
                                               IPropertyGridInlineEditor editor, 
                                               PropertyInfo inlinePropertyInfo)
    {
        var currentInstance = originalPropertyInfo.GetValue(Instance);
        var changedInstance = editor.GetInstance();

        if(currentInstance != changedInstance)
        {
            originalPropertyInfo.SetValue(Instance, changedInstance);
            if(currentInstance is IDisposable)
            {
                ((IDisposable)currentInstance).Dispose();
            }
        }

        return OnPropertyChanged.InvokeAsync(originalPropertyInfo);
    }

    private Task PropertyChanged(PropertyInfo propertyInfo, object? val) => HandleAsync(() =>
    {
        if (Properties?.ContainsKey(propertyInfo) == true)
        {
            if (val is HashSet<object> hashSet)  // Select for enum sends hashSet !?
            {
                if (propertyInfo.PropertyType.IsFlagsEnum())
                {
                    val = 0;
                    foreach (var enumVal in hashSet)
                    {
                        val = (int)val + (int)enumVal;
                    }
                }
                else if(hashSet.Count == 1)
                {
                    val = hashSet.First();
                }
                else
                {
                    return Task.CompletedTask;
                    //throw new Exception("Can't process HashSet for this property!");
                }
            }

            Properties[propertyInfo] = val;

            propertyInfo.SetValue(Instance, val);

            return OnPropertyChanged.InvokeAsync(propertyInfo);
        }

        return Task.CompletedTask;
    });
}