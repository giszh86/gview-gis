@using System.Text
@using gView.Carto.Razor.Components.Controls.Renderers.Models
@using gView.Framework.Core.Data.Cursors
@using gView.Framework.Data.Filters

@inherits BaseHandler
@implements IDisposable

@inject IApplicationScopeFactory AppScopeFactory

@if(_renderer is not null && _layer?.FeatureClass is not null)
{
    <KeySymbolListControl TKey="string"
                          KeySymbols="@(CurrentKeySymbolsList() ?? [])"
                          OnKeySymbolsChanged="SymbolsListChanged"
                          OnKeySymbolChanged="SymbolChanged">
        <ListItemTools>
            <GvGrid ColumnCount="2">
                <GvGridItem>
                    <MudSelect T="string" Label="Value Field 1"
                               Value="_renderer.ValueField1"
                               ValueChanged="(val) => OnValueFieldChanged(0, val)" >
                        @GvUtilities.StringsToSelectItems(_layer.FeatureClass
                                                                .Fields?
                                                                .ToEnumerable()
                                                                .Select(f => f.name) ?? [])
                    </MudSelect>
                    @if(!String.IsNullOrEmpty(_renderer.ValueField1))
                    {
                        <MudSelect T="string" Label="Value Field 2"
                                   Value="_renderer.ValueField2"
                                   ValueChanged="(val) => OnValueFieldChanged(1, val)">
                            @GvUtilities.StringsToSelectItems(_layer.FeatureClass
                                     .Fields?
                                     .ToEnumerable()
                                     .Select(f => f.name) ?? [], true)
                        </MudSelect>
                    }
                    @if(!String.IsNullOrEmpty(_renderer.ValueField2))
                    {
                        <MudSelect T="string" Label="Value Field 3"
                                   Value="_renderer.ValueField3"
                                   ValueChanged="(val) => OnValueFieldChanged(2, val)">
                            @GvUtilities.StringsToSelectItems(_layer.FeatureClass
                                     .Fields?
                                     .ToEnumerable()
                                     .Select(f => f.name) ?? [], true)
                        </MudSelect>
                    }
                </GvGridItem>
                <GvGridItem>

                </GvGridItem>
            </GvGrid>
            <MudPaper Elevation="24">
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                    <MudButton OnClick="OnAddAllItemsClickAsync"
                               Disabled="@(_processingAddAllValues || _processingRemoveNotExistingValues)">
                        @if (_processingAddAllValues)
                        {
                            <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Adding Values</MudText>
                        }
                        else if (_processingRemoveNotExistingValues)
                        {
                            <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Remove unused</MudText>
                        }
                        else
                        {
                            <MudText>Add All Values</MudText>
                        }
                    </MudButton>
                    <MudButton OnClick="() => _addValueItem = new()">Add Value</MudButton>
                    <MudButton OnClick="OnAddAllOtherValuesItemClick">Add "All other"</MudButton>
                    <MudMenu Label="More ..." Variant="Variant.Filled">
                        <MudMenuItem Icon="@MudBlazor.Icons.Material.Outlined.Cancel"
                                     IconColor="Color.Surface">
                            Cancel
                        </MudMenuItem>
                        <MudMenuItem Icon="@MudBlazor.Icons.Material.Outlined.TextFormat"
                                     IconColor="Color.Primary"
                                     Onclick="OnLabelStyleClickAsync">
                            Label Style ...
                        </MudMenuItem>
                        <MudMenuItem Icon="@MudBlazor.Icons.Material.Outlined.CopyAll"
                                     IconColor="Color.Primary"
                                     Onclick="OnDataValueToLabelClick">
                            Data Value => Label
                        </MudMenuItem>
                        <MudMenuItem Icon="@MudBlazor.Icons.Material.Outlined.Sort"
                                     IconColor="Color.Primary"
                                     OnClick="OnLabelOrderingClickAsync">
                            Order by Labels ...
                        </MudMenuItem>
                        <MudMenuItem Icon="@MudBlazor.Icons.Material.Outlined.TextFields"
                                     IconColor="Color.Primary"
                                     OnClick="OnSetValueFieldsClickAsync">
                            Set Value Fields ...
                        </MudMenuItem>
                        <MudMenuItem Icon="@MudBlazor.Icons.Material.Outlined.Delete"
                                     IconColor="Color.Secondary"
                                     OnClick="OnRemoveNotExistingItemsClickAsync">
                            Remove, if not exsts in source
                        </MudMenuItem>
                        <MudMenuItem Icon="@MudBlazor.Icons.Material.Filled.Delete"
                                     IconColor="Color.Secondary"
                                     OnClick="OnRemoveAllItemsClick">
                            Remove All
                        </MudMenuItem>
                    </MudMenu>
                </MudButtonGroup>
            </MudPaper>
            <MudText Typo="Typo.h6">
                @($"{_dictKeySymbols.IfKeyExists(CurrentKey(), (l) => l.Count)} items")
            </MudText>

            @if (_addValueItem is not null)
            {
                <GvCard Title="Add Value Item">
                    <GvCardContent>
                        <GvGrid ColumnCount="2">
                            <GvGridItem>
                                <MudTextField Label="@_renderer.ValueField1"
                                              @bind-Value="_addValueItem.Key1"></MudTextField>
                                @if(!String.IsNullOrEmpty(_renderer.ValueField2))
                                {
                                    <MudTextField Label="@_renderer.ValueField2"
                                                  @bind-Value="_addValueItem.Key2"></MudTextField>
                                }
                                @if (!String.IsNullOrEmpty(_renderer.ValueField3))
                                {
                                    <MudTextField Label="@_renderer.ValueField3"
                                                  @bind-Value="_addValueItem.Key3"></MudTextField>
                                }
                            </GvGridItem>
                            <GvGridItem>
                                <MudTextField Label="Label Text"
                                              @bind-Value="_addValueItem.LabelText"></MudTextField>
                            </GvGridItem>
                        </GvGrid>
                    </GvCardContent>
                    <GvCardActions>
                        <MudButton Variant="Variant.Filled"
                                   OnClick="() => _addValueItem = null" >Cancel</MudButton>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="OnAddValueItem">Add</MudButton>
                    </GvCardActions>
                </GvCard>
            }
        </ListItemTools>
    </KeySymbolListControl>

    <MudPaper Elevation="24">
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
            <MudButton OnClick="SetRotation"
                       Disabled="@(!_layer.CanRotateSymbols())">
                Rotation
            </MudButton>
            <MudButton OnClick="SetCartographicsMethod">
                Cartography
            </MudButton>
        </MudButtonGroup>
    </MudPaper>
}

@code {
    [Parameter] public object? Instance { get; set; }

    private IFeatureLayer? _layer;
    private ManyValueMapRenderer? _renderer;

    private Dictionary<string, List<KeySymbol<string>>> _dictKeySymbols = new();
    private ManyValueItemModel? _addValueItem = null;

    private bool _processingAddAllValues = false;
    private bool _processingRemoveNotExistingValues = false;

    protected override Task OnParametersSetAsync() => HandleAsync(async () =>
    {
        await base.OnParametersSetAsync();

        if (Instance is IFeatureLayer fLayer)
        {
            _layer = fLayer;
            _renderer = fLayer.FeatureRenderer as ManyValueMapRenderer;

            if (_renderer is not null)
            {
                _renderer.GeometryType = _layer.LayerGeometryType;
                if(String.IsNullOrEmpty(_renderer.ValueField1))
                {
                    _renderer.ValueField1 = _layer.FeatureClass?.IDFieldName ?? "";
                }
            }
        }
        else
        {
            _renderer = Instance as ManyValueMapRenderer;
        }

        if(_renderer is not null)
        {
            var keySymbols = CurrentKeySymbolsList();
            keySymbols.Clear();

            int index = 0;
            foreach (string key in _renderer.Keys)
            {
                var symbol = (_renderer.LegendItem(index) as ISymbol)?.Clone() as ISymbol;

                if (symbol is not null)
                {
                    keySymbols.Add(new KeySymbol<string>(key, symbol));
                }
                index++;
            }
        }
    });

    private void ApplyChanges()
    {
        if(_renderer is null)
        {
            return;
        }

        _renderer.Keys.ToList()
                      .ForEach(key => _renderer.RemoveSymbol(key));

        var keySymbols = CurrentKeySymbolsList();
        keySymbols.ForEach((keySybol) => _renderer[keySybol.Key] = keySybol.Symbol.Clone() as ISymbol);
    }

    private void SymbolsListChanged(List<KeySymbol<string>> keySymbols)
    {
        if(_renderer is null)
        {
            return;
        }

        _dictKeySymbols[CurrentKey()] = keySymbols;
        ApplyChanges();
    }

    private void SymbolChanged(KeySymbol<string> keySymbol)
    {
        if (_renderer is null)
        {
            return;
        }

        ApplyChanges();
    }

    private void OnValueFieldChanged(int index, string field)
    {
        if (_renderer is not null)
        {
            switch(index)
            {
                case 0:
                    _renderer.ValueField1 = field;
                    break;
                case 1:
                    _renderer.ValueField2 = field;
                    break;
                case 2:
                    _renderer.ValueField3 = field;
                    break;

            }

            CurrentKeySymbolsList();
        }
    }

    #region Button Events

    private Task OnAddAllItemsClickAsync() => HandleAsync(async () =>
    {
        if (_renderer is null || _layer?.FeatureClass is null)
        {
            return;
        }

        OnRemoveAllItemsClick();
        var keySymbols = CurrentKeySymbolsList();

        try
        {
            _processingAddAllValues = true;
            await this.ForceRenderComponent();

            QueryFilter filter = new QueryFilter();
            if (!String.IsNullOrEmpty(_renderer.ValueField1))
            {
                filter.AddField(_renderer.ValueField1);
            }

            if (!String.IsNullOrEmpty(_renderer.ValueField2))
            {
                filter.AddField(_renderer.ValueField2);
            }

            if (!String.IsNullOrEmpty(_renderer.ValueField3))
            {
                filter.AddField(_renderer.ValueField3);
            }
            filter.OrderBy = _renderer.ValueField1;

            HashSet<string> keys = new();

            using (IFeatureCursor cursor = (IFeatureCursor)await _layer.FeatureClass.Search(filter))
            {
                IFeature feature;

                while ((feature = await cursor.NextFeature()) != null)
                {
                    keys.Add(_renderer.GetKey(feature));
                }
            }

            foreach (var key in keys.Order())
            {
                var symbol = RendererFunctions.CreateStandardSymbol(_layer.LayerGeometryType);

                if (symbol is null)
                {
                    continue;
                }

                symbol.AddLegendLabel(key.Replace("|", ", "));

                keySymbols.Add(new KeySymbol<string>(key, symbol));
            }

            ApplyChanges();
        }
        finally
        {
            _processingAddAllValues = false;
        }
    });

    private Task OnRemoveNotExistingItemsClickAsync() => HandleAsync(async () =>
    {
        if (_renderer is null || _layer?.FeatureClass is null)
        {
            return;
        }

        try
        {
            _processingRemoveNotExistingValues = true;

            await this.ForceRenderComponent();

            QueryFilter filter = new QueryFilter();
            if (!String.IsNullOrEmpty(_renderer.ValueField1))
            {
                filter.AddField(_renderer.ValueField1);
            }

            if (!String.IsNullOrEmpty(_renderer.ValueField2))
            {
                filter.AddField(_renderer.ValueField2);
            }

            if (!String.IsNullOrEmpty(_renderer.ValueField3))
            {
                filter.AddField(_renderer.ValueField3);
            }
            filter.OrderBy = _renderer.ValueField1;

            HashSet<string> distinctValues = new();

            using (IFeatureCursor cursor = (IFeatureCursor)await _layer.FeatureClass.Search(filter))
            {
                IFeature feature;

                while ((feature = await cursor.NextFeature()) != null)
                {
                    distinctValues.Add(_renderer.GetKey(feature));
                }
            }

            var keySymbols = CurrentKeySymbolsList();

            foreach (var keySymbol in keySymbols.ToArray())
            {
                if (keySymbol.Key != ValueMapRenderer.AllOtherValuesKey
                    && !distinctValues.Contains(keySymbol.Key))
                {
                    keySymbols.Remove(keySymbol);
                    keySymbol.Symbol.Release();
                }
            }

            ApplyChanges();
        }
        finally
        {
            _processingRemoveNotExistingValues = false;
        }
    });

    private void OnRemoveAllItemsClick() => Handle(() =>
    {
        if (_renderer is null)
        {
            return;
        }

        _dictKeySymbols.RemoveIfExists(CurrentKey(), (keySymbols) =>
            keySymbols?.ForEach((keySymbol) 
                => keySymbol.Symbol?.Release())
        );

        CurrentKeySymbolsList();

        ApplyChanges();
    });

    private void OnAddAllOtherValuesItemClick() => Handle(() =>
    {
        if (_renderer is null)
        {
            return;
        }

        var keySymbols = CurrentKeySymbolsList();

        keySymbols.Any(k => k.Key == ValueMapRenderer.AllOtherValuesKey)
                  .ThrowIfTrue(() => "All other values item is already added");

        var symbol = RendererFunctions.CreateStandardSymbol(_renderer.GeometryType)
                                  .AddLegendLabel(ValueMapRenderer.AllOtherValuesLabel);

        keySymbols.Add(new KeySymbol<string>(ValueMapRenderer.AllOtherValuesKey, symbol));

        ApplyChanges();

    });

    private void OnAddValueItem() => Handle(() =>
    {
        if(_renderer is not null 
            && _layer is not null
            && _addValueItem is not null)
        {
            var keySymbols = CurrentKeySymbolsList();

            _addValueItem.Key1 = _addValueItem.Key1?.Trim() ?? "";
            _addValueItem.Key2 = _addValueItem.Key2?.Trim() ?? "";
            _addValueItem.Key3 = _addValueItem.Key3?.Trim() ?? "";

            Feature feature = new Feature();
            feature.Fields.Add(new FieldValue(_renderer.ValueField1, _addValueItem.Key1));
            if(!String.IsNullOrEmpty(_renderer.ValueField2))
            {
                feature.Fields.Add(new FieldValue(_renderer.ValueField2, _addValueItem.Key2));
            }
            if (!String.IsNullOrEmpty(_renderer.ValueField3))
            {
                feature.Fields.Add(new FieldValue(_renderer.ValueField3, _addValueItem.Key3));
            }

            string key = _renderer.GetKey(feature);

            keySymbols.Any(k => k.Key == key)
                      .ThrowIfTrue(() => $"Item {key} already exists");

            var symbol = RendererFunctions
                            .CreateStandardSymbol(_layer.LayerGeometryType)
                            .ThrowIfNull(() => $"Can't create a symbol for {_layer.LayerGeometryType} geometry")
                            .AddLegendLabel(_addValueItem.LabelText.Replace("|", ", "));

            keySymbols.Add(new KeySymbol<string>(key, symbol));

            ApplyChanges();
        }
        _addValueItem = null;
    });

    private Task OnLabelStyleClickAsync() => HandleAsync(async () =>
    {
        var selectPromptModel = await AppScopeFactory.ShowModalDialog(
                typeof(gView.Razor.Dialogs.PromptSelectDialog<LabelCommand>),
                "Label Command",
                new PromptSelectDialogModel<LabelCommand>()
                    {
                        Options = EnumExtensions
                                        .ToKeyValuePairs<LabelCommand>()
                                        .Select(k => new KeyValuePair<string, LabelCommand>(k.Key.ApplyLabelCommand(k.Value), k.Value)),
                        Required = true,
                        Prompt = "Select a label command"
                    }
        );

        if (selectPromptModel is null) return;

        var keySymbols = CurrentKeySymbolsList();

        foreach (var keySymbol in keySymbols)
        {
            keySymbol.LegendLabel = keySymbol.LegendLabel.ApplyLabelCommand(selectPromptModel.SelectedValue);
        }

        ApplyChanges();
    });

    private Task OnLabelOrderingClickAsync() => HandleAsync(async () =>
    {
        var key = CurrentKey();

        if (_renderer is null || !_dictKeySymbols.ContainsKey(key))
            return;

        var selectPromptModel = await AppScopeFactory.ShowModalDialog(
                typeof(gView.Razor.Dialogs.PromptSelectDialog<SortDirection>),
                "Label Ordering",
                new PromptSelectDialogModel<SortDirection>()
                    {
                        Options = EnumExtensions.ToKeyValuePairs<SortDirection>(ignoreNone: true),
                        Required = true,
                        Prompt = "Order by",
                        SelectedValue = SortDirection.Ascending
                    }
        );

        if (selectPromptModel is null) return;

        _dictKeySymbols[key] = _dictKeySymbols[key]
                                .OrderByDirection(selectPromptModel.SelectedValue, k => k.LegendLabel)
                                .Select(k => new KeySymbol<string>(k.Key, k.Symbol))  // create new KeySymbols to enforce resortable list to refresh!
                                .ToList();


        ApplyChanges();
    });

    private void OnDataValueToLabelClick() => Handle(() =>
    {
        var keySymbols = CurrentKeySymbolsList();

        foreach (var keySymbol in keySymbols)
        {
            if (keySymbol.Key == ValueMapRenderer.AllOtherValuesKey) continue;

            keySymbol.LegendLabel = keySymbol.Key.Replace("|", ", ");
        }

        ApplyChanges();
    });

    private Task OnSetValueFieldsClickAsync() => HandleAsync(async () =>
    {
        if (_renderer is null || _layer is null)
            return;

        var options = _layer.FeatureClass
                                        .Fields?
                                        .ToEnumerable()
                                        .Select(f => new KeyValuePair<string, string>(f.name, f.name))
                                        .Prepend(new KeyValuePair<string, string>("", ""));

        var selectPromptModel = await AppScopeFactory.ShowModalDialog(
            typeof(gView.Razor.Dialogs.PromptManySelectDialog<string>),
            "Set Value Fields",
            new PromptManySelectDialogModel<string>()
            {
                Prompts = [
                    new PromptSelectDialogModel<string>()
                    {
                        Options = options,
                        Required = true,
                        Prompt = "Value Field 1",
                        SelectedValue = _renderer.ValueField1
                    },
                    new PromptSelectDialogModel<string>()
                    {
                        Options = options,
                        Required = false,
                        Prompt = "Value Field 2",
                        SelectedValue = _renderer.ValueField2
                    },
                    new PromptSelectDialogModel<string>()
                    {
                        Options = options,
                        Required = false,
                        Prompt = "Value Field 3",
                        SelectedValue = _renderer.ValueField3
                    }
                ]
            }

        );

        if (selectPromptModel?.Prompts is null) return;

        var currentKey = CurrentKey();
        var newKey = CreateKey(selectPromptModel.Prompts.Select(p => p.SelectedValue).ToArray());

        if (currentKey == newKey) return;

        List<KeySymbol<string>> newKeySymbols = new();

        foreach (var keySymbol in CurrentKeySymbolsList())
        {
            newKeySymbols.Add(new KeySymbol<string>(keySymbol.Key, (ISymbol)keySymbol.Symbol.Clone()));
        }

        _dictKeySymbols[newKey] = newKeySymbols;
        _renderer.ValueField1 = selectPromptModel.Prompts.First().SelectedValue;
        _renderer.ValueField2 = selectPromptModel.Prompts.Skip(1).First().SelectedValue;
        _renderer.ValueField3 = selectPromptModel.Prompts.Skip(2).First().SelectedValue;

        ApplyChanges();
    });

    private Task SetRotation() => HandleAsync(() =>
        _renderer?.SymbolRotation.EditProperties(AppScopeFactory, _layer?.FeatureClass)
        ?? Task.CompletedTask);

    private Task SetCartographicsMethod() => HandleAsync(async () =>
    {
        if (_renderer is null)
        {
            return;
        }

        var model = await AppScopeFactory.ShowModalDialog
            (typeof(LegendGroupCartographicMethodDialog),
            "Cartographic Method",
            new LegendGroupCartographicMethodModel()
                {
                    CartographicMethod = _renderer.CartoMethod
                },
            new ModalDialogOptions()
                {
                    Width = ModalDialogWidth.ExtraSmall
                });

        if (model is not null)
        {
            _renderer.CartoMethod = model.CartographicMethod;
        }
    });

    #endregion

    #region Helper

    private string CurrentKey() => CreateKey(_renderer?.ValueField1, _renderer?.ValueField2, _renderer?.ValueField3);

    private string CreateKey(params string?[] items)
        => items is null 
           ? ""
           : items.FirstOrDefault()?.AppendNonEmpty("|", items.Skip(1).ToArray()) ?? "";

    private List<KeySymbol<string>> CurrentKeySymbolsList()
    {
        if (_renderer is not null)
        {
            string key = CurrentKey();

            if (!_dictKeySymbols.ContainsKey(key))
            {
                _dictKeySymbols[key] = [];
            }

            return _dictKeySymbols[key];
        }

        return [];
    }

    #endregion

    #region IDisposable

    public void Dispose()
    {
        _dictKeySymbols.ForEach((key, keySymbols) =>
            keySymbols.ForEach((keySymbol) => keySymbol.Symbol?.Release())
        );
        _dictKeySymbols.Clear();
    }

    #endregion
}