@inject ICartoApplicationScopeService AppScope
@inherits BaseHandler

@if(_items is not null)
{
    @if(_showRemoveDialog == true)
    {
        <MudList>
            @foreach(var item in _items.Where(e => e.Selected))
            {
                <MudListItem Style="@($"color:{(item.TocElement.IsGroupElement() ? "var(--mud-palette-primary)" : "inherit")}")"
                             Text="@($"{item.TocElement.ParentGroup.FullPath()}/{item.TocElement.Name}")" />
            }
        </MudList> 
        <MudButton Variant="Variant.Filled" 
                   OnClick="() => _showRemoveDialog = false">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Secondary"
                   OnClick="RemoveSelectedItemsFromMap">Remove</MudButton>
    } 
    else 
    { 
        <MudDropContainer T="TocElementWrapper" 
                          Items="_items"
                          ItemsSelector="@((item,dropzone) =>
                                   item.TocElement.ParentGroup.FullPath() == dropzone)"
                          ItemDropped="TocItemDropped">
            <ChildContent>
                <GvGrid ColumnCount="2">
                    <GvGridItem>
                        <MudPaper>
                            <GvScrollable>
                                <MudList Clickable="true"
                                         SelectedValue="SelectedGroupElement"
                                         SelectedValueChanged="OnGroupElementSelected"
                                         Dense="true">
                                    <MudDropZone T="TocElementWrapper" Identifier="@string.Empty" OnlyZone="true">
                                        <MudListItem Text="@MapName" InitiallyExpanded="true"
                                                     Value="((ITocElement?)null).FullPath()" />
                                    </MudDropZone>
                                    <TocOrderingGroupNodesControl Elements="_items"
                                                                  ParentGroup="null" />
                                </MudList>
                            </GvScrollable>
                        </MudPaper>
                    </GvGridItem>
                    <GvGridItem>
                        <GvScrollable>
                        <MudList Dense="true" 
                                 Clickable="true">
                            <MudPaper Elevation="25" Style="padding:6px">
                                <MudToolBar DisableGutters="true" Dense="true">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   OnClick="() => _showRemoveDialog = true"
                                                   Disabled="!_items.Any(e => e.Selected)"
                                                   Color="Color.Secondary"/>
                                    <MudTextField @bind-Value="@_newGroupText"
                                                  Label="New Group" />
                                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                                   OnClick="CreateAndAddGroup"
                                                   Color="Color.Primary"/>
                                </MudToolBar>
                            </MudPaper>
                            <MudDivider />
                            <MudDropZone T="TocElementWrapper"
                                         AllowReorder="true"
                                         Identifier="@SelectedGroupElement.FullPath()"
                                         Class="flex-grow-1" />
                            </MudList>
                        </GvScrollable>
                    </GvGridItem>
                </GvGrid>
            </ChildContent>
            <ItemRenderer>
                <MudListItem Style="@($"color:{(context.TocElement.IsGroupElement() ? "var(--mud-palette-primary)" : "inherit")}")">
                    <GvGrid ColumnCount="12">
                        <GvGridItem>
                            <MudCheckBox @bind-Checked="context.Selected" T="bool" />
                        </GvGridItem>
                        <GvGridItem Span="11">
                            <MudText Typo="Typo.body1">@context.Name</MudText>
                        </GvGridItem>
                    </GvGrid>
                </MudListItem>
                <MudDivider />
            </ItemRenderer>
        </MudDropContainer>
    }
}

@code {
    [Parameter] public IToc? Toc { get; set; }
    [Parameter] public string MapName { get; set; } = "Map";
    [Parameter] public ITocElement? SelectedGroupElement { get; set; }

    private TocElementWrapper[]? _items;
    private string _newGroupText = "";
    private bool _showRemoveDialog = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_items is null) 
        {
            WrapTocElements();
        }
    }

    private void WrapTocElements()
    {
        _items = Toc?.Elements
                        .Select(e => new TocElementWrapper(e)
                        {
                            // copy selection state from previous items
                            Selected = _items?.FirstOrDefault(i => i.TocElement == e)?.Selected == true
                        })
                        .ToArray();
    }

    private void ClearSelection() 
        => _items?.ToList().ForEach(e => e.Selected = false);

    async private Task HardReload()
    {
        _items = null;
        await ForceRenderComponent();

        WrapTocElements();
        await ForceRenderComponent();
    }

    private void OnGroupElementSelected(object item)
    {
        _newGroupText = "";
        ClearSelection();
        SelectedGroupElement = item as ITocElement;
    }

    private void TocItemDropped(MudItemDropInfo<TocElementWrapper> dropItem) => Handle(() =>
    {
        if (Toc is null || dropItem.Item is null || _items is null)
        {
            return;
        }

        var groupElement = Toc.Elements
            .FirstOrDefault(e => e.IsGroupElement() && e.FullPath() == dropItem.DropzoneIdentifier);

        var tocElementItem = dropItem.Item.TocElement;

        if (tocElementItem.ParentGroup == groupElement)
        {
            if(dropItem.IndexInZone < 0)
            {
                throw new Exception($"Item already included in {groupElement.FullPath()}");

            }
            var groupItems = Toc.Elements
                                .Where(e => e.ParentGroup.FullPath() == SelectedGroupElement.FullPath())
                                .ToArray();

            if (groupItems.Length > dropItem.IndexInZone)
            {
                var itemIndex = groupItems.IndexOf(tocElementItem);
                var nextItem = groupItems[dropItem.IndexInZone];

                if (nextItem != tocElementItem)
                {
                    Toc.MoveElement(tocElementItem, nextItem,
                        insertAfter: itemIndex < dropItem.IndexInZone);
                }
            }
        }
        else if (dropItem.Item.Selected)  // Move all selected
        {
            var selectedItems = _items.Where(e => e.Selected).ToList();

            foreach (var selectedItem in selectedItems)
            {
                Toc.Add2Group(selectedItem.TocElement, groupElement);
            }
        }
        else
        {
            Toc.Add2Group(tocElementItem, groupElement);
        }

        // rewrap Toc elements to ensure
        // ui is display elements in corret order
        WrapTocElements();
    });

    private Task CreateAndAddGroup() => HandleAsync(async () => 
    {
        if (Toc is null)
        {
            return;
        }

        _newGroupText = _newGroupText.Trim();

        if (String.IsNullOrEmpty(_newGroupText))
        {
            return;
        }

        GroupLayer groupLayer = new GroupLayer()
            {
                Title = _newGroupText
            };

        _newGroupText = string.Empty;

        AppScope.Document.Map.AddLayer(groupLayer);
        var groupTocElement = Toc.GetTOCElement(groupLayer);

        if (groupTocElement is null)
        {
            AppScope.Document.Map.RemoveLayer(groupLayer);
            throw new Exception("Unkown error: Can't add group layer");
        }
        Toc.Add2Group(groupTocElement, SelectedGroupElement);

        // dropcontainer need a full hard refresh!
        await HardReload();
        /////////////////////////////////////////
    });

    private Task RemoveSelectedItemsFromMap() => HandleAsync(async () =>
    {
        if (_items is null)
        {
            return;
        }

        foreach (var element in _items.Where(e => e.Selected).ToArray())
        {
            foreach (var layer in element.TocElement.Layers.ToArray())
            {
                AppScope.Document.Map.RemoveLayer(layer);
            }
        }

        _showRemoveDialog = false;

        await HardReload();
    });
}