@inject PluginManagerService PluginManager
@inject ICartoApplicationScopeService AppScope
@inherits BaseHandler

@if (_labelRenderers is not null)
{
    <GvGrid ColumnCount="3">
        <GvGridItem>
            <MudCheckBox T="bool"
                         Value="@(Layer?.LabelRenderer is not null)"
                         ValueChanged="(chk) => LabelFeaturesChecked(chk)"
                         Label="Label features for this layer" />
            @if (Layer?.LabelRenderer is not null)
            {
                <GvCard Title="Label Renderers">
                    <GvCardContentNoPadding>
                        <MudList Dense="true" T="string"
                                 Style="padding:0px">
                            @foreach (var labelRenderer in _labelRenderers)
                            {
                                <MudListItem Style="white-space:nowrap;overflow:hidden"
                                                Dense="true"
                                                Class="@(labelRenderer.GetType() == _selectedRendererType ? "gview-selected-item" : "")"
                                                OnClick="() => SelectRenderer(labelRenderer)">
                                    @labelRenderer.Name
                                </MudListItem>
                            }
                        </MudList>
                    </GvCardContentNoPadding>
                </GvCard>
            }
            <GvCard Title="Copy From">
                <MudList Dense="true" T="string"
                         Style="padding:0px">
                    <MudListItem Style="white-space:nowrap;overflow:hidden"
                                 Dense="true"
                                 OnClick="OnCopyRendererClickAsync">
                        Other Layer ...
                    </MudListItem>
                    <MudListItem Style="white-space:nowrap;overflow:hidden"
                                 Dense="true"
                                 OnClick="OnImportRendererClickAsync">
                        Other Map (XML) ...
                    </MudListItem>
                </MudList>
            </GvCard>
        </GvGridItem>
        <GvGridItem Span="2">
            @if (Layer?.LabelRenderer is not null && _selectedRendererType is not null)
            {
                var renderer = _labelRenderers.First(r => _selectedRendererType.Equals(r.GetType()));

                <GvCard Title="@renderer.Name">
                    <GvCardContent>
                        @if (_propertyPageRenderFragment is not null)
                        {
                            @(_propertyPageRenderFragment)
                        }
                    </GvCardContent>
                </GvCard>
            }
        </GvGridItem>
    </GvGrid>
}

@code {
    [Parameter] public IMap? Map { get; set; }
    [Parameter] public IFeatureLayer? Layer { get; set; }

    private ILabelRenderer[]? _labelRenderers;
    private IPropertyPageDefinition[]? _propertyPageDefs;

    private Type? _selectedRendererType;
    private IPropertyPageDefinition? _currentPropertyPage;
    private RenderFragment? _propertyPageRenderFragment;

    protected override Task OnParametersSetAsync() => HandleAsync(async () =>
    {
        await base.OnParametersSetAsync();

        if (Map is not null && Layer is not null)
        {
            _labelRenderers = PluginManager.GetPlugins<ILabelRenderer>(gView.Framework.Common.Plugins.Type.ILabelRenderer)
                                             .Where(r => r.CanRender(Layer, Map))
                                             .Select(r => r.GetType().Equals(Layer.LabelRenderer?.GetType())
                                                            ? Layer.LabelRenderer!
                                                            : r)
                                             .ToArray();

            foreach (var renderer in _labelRenderers)
            {
                if (renderer != Layer.LabelRenderer && renderer is IDefault def)
                {
                    await def.DefaultIfEmpty(Layer);
                }
            }

            _propertyPageDefs = PluginManager.GetPlugins<IPropertyPageDefinition>(gView.Framework.Common.Plugins.Type.IPropertyPageDefinition)
                                             .Where(p => p.InterfaceType == typeof(ILabelRenderer))
                                             .ToArray();

            SelectRenderer(Layer.LabelRenderer);
        }
        else
        {
            _labelRenderers = null;
        }
    });

    private void SelectRenderer(ILabelRenderer? labelRenderer) => Handle(() =>
    {
        _selectedRendererType = labelRenderer?.GetType();

        if (Layer is not null)
        {
            Layer.LabelRenderer = labelRenderer;

            _currentPropertyPage = _propertyPageDefs?.FirstOrDefault(p => p.InstanceType == labelRenderer?.GetType());
            if (_currentPropertyPage is not null)
            {
                _propertyPageRenderFragment = new RenderFragment(builder =>
            {
                var sequence = 0;
                builder.OpenComponent(sequence, _currentPropertyPage.PropertyPageType);
                builder.AddAttribute(++sequence, "Instance", Layer);
                builder.CloseComponent();
            });
            }
            else
            {
                _propertyPageRenderFragment = null;
            }
        }
    });

    private void LabelFeaturesChecked(bool renderer) => Handle(() =>
    {
        if (Layer is null)
        {
            return;
        }

        if (renderer == false)
        {
            Layer.LabelRenderer = null;
        }
        else
        {
            Layer.LabelRenderer =
                _labelRenderers?.FirstOrDefault(r => r.GetType() == _selectedRendererType)
                ?? _labelRenderers?.FirstOrDefault(r => r is SimpleLabelRenderer)
                ?? _labelRenderers?.FirstOrDefault();

            SelectRenderer(Layer.LabelRenderer);
        }
    });

    private Task OnImportRendererClickAsync() => HandleAsync(async () =>
    {
        if (Layer is null) return;

        var lastAccessedDocuments = await AppScope.Settings.GetLastAccessedDocuments() ?? [];

        var previousMapModel = lastAccessedDocuments.Count() == 0
            ? new()
            : await AppScope.ShowModalDialog(
                typeof(Razor.Components.Dialogs.OpenPreviousMapDialog),
                "Previous opened maps ...",
                new Razor.Components.Dialogs.Models.OpenPreviousMapDialogModel()
                    {
                        Items = lastAccessedDocuments
                    }
            );

        if (previousMapModel is null) return;

        string? xmlFileName;
        if (previousMapModel.Selected == null)
        {
            var openMapModel = await AppScope.ShowKnownDialog(Framework.Blazor.KnownDialogs.ExplorerDialog,
                                        title: "Open map document",
                                        model: new ExplorerDialogModel()
                                            {
                                                Filters = new List<ExplorerDialogFilter> {
                                                new OpenFileFilter("Map", "*.mxl")
                                                    },
                                                Mode = ExploerDialogMode.Open
                                            }
                                 );

            xmlFileName = openMapModel?.Result.ExplorerObjects.FirstOrDefault()?.FullName;
        }
        else
        {
            xmlFileName = previousMapModel.Selected.Path;
        }

        if (String.IsNullOrEmpty(xmlFileName))
        {
            return;
        }

        var stream = new Framework.IO.XmlStream("");
        stream.ReadStream(xmlFileName);

        var cartoDocument = new CartoDocument(null);

        await stream.LoadAsync("MapDocument", cartoDocument);

        if (cartoDocument.Map is not null)
        {
            await SelectRendererAsync(cartoDocument.Map);
        };
    });

    private Task OnCopyRendererClickAsync() =>
        Map is not null
            ? SelectRendererAsync(Map)
            : Task.CompletedTask;

    private Task SelectRendererAsync(IMap map) => HandleAsync(async () =>
    {
        if (Layer is null) return;

        var layerModel = await AppScope.ShowModalDialog(
                typeof(SelectMapLayerDialog),
                "Select map layer",
                new SelectMapLayerDialogModel()
                    {
                        Map = map,
                        LayerFilter = (layer) =>
                            layer switch
                            {
                                IFeatureLayer when Map == map && Layer.ID.Equals(layer.ID) => false,
                                IFeatureLayer featureLayer =>
                                    featureLayer.LabelRenderer is not null,
                                _ => false
                            }
                    }
        );

        var newLabelRenderer = (layerModel?.SelectedLayer as IFeatureLayer)?.LabelRenderer?.Clone() as ILabelRenderer;

        if (newLabelRenderer is not null)
        {
            Layer.LabelRenderer = newLabelRenderer;

            SelectRenderer(Layer.LabelRenderer);
        }
    });
}