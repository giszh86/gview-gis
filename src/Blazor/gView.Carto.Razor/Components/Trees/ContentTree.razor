@using gView.Blazor.Models.Settings

@inherits BaseHandler
@implements IDisposable

@inject IconService IconService
@inject ICartoApplicationService CartoApplication
@inject ICartoApplicationScopeService AppScope
@inject PluginManagerService PluginManager
@inject CartoEventBusService EventBus
@inject SettingsService Settings

@if(_isLoadingMap)
{
    <MudProgressCircular Indeterminate="true" Size="MudBlazor.Size.Small" />
    <div>
        Loading map ...
    </div>  
} 
else
{
    <div style="padding:2px 10px">

        @if (_editMapName)
        {
            <InlineInput @bind-Value="_editedName"
                         OnCommit="CommitEditMapName" />
        }
        else
        {
            <MudText Typo="Typo.h6"
                     @ondblclick="StartEditMapName">
                @AppScope.Document.Map.Name
            </MudText>
        }
    </div>

    @if (_treeNodes.Any())
    {
        <MudTreeView Items="_treeNodes" T="ITocElement"
                     ExpandOnDoubleClick="true" 
                     SelectionMode="SelectionMode.ToggleSelection" 
                     Hover="true" Dense="true"
                     @key="@fullReloadKey">
            <ItemTemplate>
                <div style="white-space:nowrap; overflow-x:hidden;"
                     class="treenode">
                @if (context is TocLayerNode layerNode)
                {
                    @if (context.Value.Layers.Count() == 0 
                        || context.Value.Layers.FirstOrDefault(l=>l is NullLayer) != null)
                    {
                        <MudTreeViewItem Value="@context.Value"
                                         Class="@(((TocTreeNode)context).IsSelected ? "toctreenode-selected" :"")"
                                         OnCLick="(e) => OnNodeClickAsync((TocTreeNode)context, e)" >
                            <Content>
                                <MudText Color="Color.Error" Style="padding-left:30px">
                                    @context.Text
                                </MudText>
                            </Content>
                        </MudTreeViewItem>
                    } 
                    else
                    {
                        <MudTreeViewItem Value="@context.Value"
                                         Class="@(((TocTreeNode)context).IsSelected ? "toctreenode-selected" :"")"
                                         Items="@context.Children"
                                         CanExpand="@context.HasChildren"
                                         Expanded="@context.Expanded"
                                         ExpandedChanged="@((expanded) => OnNodeExpandedChanged((TocTreeNode)context, expanded))"
                                         OnClick="(e) => OnNodeClickAsync((TocTreeNode)context,e)">
                            <Content>
                                <MudTreeViewItemToggleButton @bind-Expanded="@context.Expanded" 
                                                             Visible="@context.HasChildren" 
                                                             ExpandedIcon="@Icons.Material.Rounded.ArrowRight" />
                                <MudCheckBox T="bool" 
                                             Value="@context.Selected"
                                             Color="Color.Surface"
                                             ValueChanged="@((e) => OnCheckboxClickedAsync((TocTreeNode)context, e))" />
                                @if(_editNameTocNode == context.Value)
                                {
                                    <InlineInput @bind-Value="_editedName"
                                                 OnCommit="CommitEditLayerName" />
                                } 
                                else
                                {
                                        <MudText @ondblclick="() => StartEditLayerName((TocTreeNode)context)">
                                        @context.Text
                                    </MudText>
                                }
                        
                            </Content>
                        </MudTreeViewItem>
                    }
                }
                else if (context is TocLegendNode)
                {
                    <MudTreeViewItem Value="@context.Value" class="legend">
                        <Content>
                            <div style="white-space:nowrap; overflow-x:hidden; width:100%">
                                <LegendTreeItem ParentElement="context.Value" />
                            </div>
                        </Content>
                    </MudTreeViewItem>
                }
                else
                {
                    <MudTreeViewItem Value="@context.Value"
                        Class="@(((TocTreeNode)context).IsSelected ? "toctreenode-selected" :"")"
                        Items="@context.Children"
                        CanExpand="true"
                        Expanded="@context.Expanded"
                        ExpandedChanged="@((expanded) => OnNodeExpandedChanged((TocTreeNode)context, expanded))"
                        @onclick="@((e) => OnNodeClickAsync((TocTreeNode)context, e))">
                            <Content>
                                <MudTreeViewItemToggleButton @bind-Expanded="@context.Expanded" 
                                                             Visible="true" 
                                                             ExpandedIconColor="Color.Primary" />
                                <MudCheckBox T="bool"
                                             Value="@context.Selected"
                                             ValueChanged="@((e) => OnCheckboxClickedAsync((TocTreeNode)context, e))" />
                                @if(_editNameTocNode == context.Value)
                                {
                                    <InlineInput @bind-Value="_editedName"
                                                 OnCommit="CommitEditLayerName" />
                                }  
                                else
                                {
                                    <MudText Class="grouplayer-text"
                                             @ondblclick="() => StartEditLayerName((TocTreeNode)context)">
                                        @context.Text
                                    </MudText>
                                }
                        
                            </Content>
                        </MudTreeViewItem>
                }
                </div>
            </ItemTemplate>
        </MudTreeView>
    }
    else if(_cartoInitialTools is not null)
    {
        <div style="padding:10px">
            @GvUtilities.InfoText("This is an empty map now. To start use one of the this tools:")
            
            @foreach(var cartoTool in _cartoInitialTools)
            {
                <div class="carto-initial-tool"
                     alt="@cartoTool.ToolTip"
                     @onclick="async () => await cartoTool.OnClick(AppScope)">
                    <div class="@(IconService.FromString(cartoTool.Icon)) icon"></div>
                    <div class="title">@cartoTool.Name</div>
                </div>
            }

            @if(_lastAccessed is not null)
            {
                @foreach(var mapFile in _lastAccessed.OrderByDescending(m=>m.LastAccess))
                {
                    <div class="carto-initial-tool"
                         @onclick="async () => await LoadMap(mapFile)">
                        <div class="@(IconService.FromString("basic:globe-table")) icon"></div>
                        <div class="title">@mapFile.DisplayPath()</div>
                        <div class="sub-title">@mapFile.LastAccess</div>

                        @{
                            var restoreState = AppScope.LatestRestorePointState(mapFile.Path); 

                            if(restoreState != RestorePointState.None) 
                            {
                                <MudFab Color="restoreState == RestorePointState.Newer ? Color.Primary : Color.Surface"
                                        DisableElevation="true"
                                        Style="position:absolute;right:6px;bottom:6px"
                                        Size="MudBlazor.Size.Small" Title="Try to restore..."
                                        StartIcon="@Icons.Material.Outlined.Restore"
                                        OnClick="async () => await OnShowRestorePointsAsync(mapFile.Path)"/>
                            }
                        }
                    </div>
                }
            }
        </div>
    
    }
}

@code {
    private List<TocTreeNode> _treeNodes = new();
    private ICartoButton[]? _cartoInitialTools;
    private IEnumerable<MapFileItem>? _lastAccessed;

    private TocTreeNode? _editNameTocNode;
    private string _editedName = "";
    private bool _editMapName = false;
    private bool _isLoadingMap = false;

    // force a full reload after rebuild
    // otherwise some items (legends) will be cached!
    private object fullReloadKey = Guid.NewGuid();

    protected override Task OnInitializedAsync() => base.HandleAsync(async () =>
    {
        await base.OnInitializedAsync();

        _cartoInitialTools = PluginManager.GetPlugins<ICartoButton>(gView.Framework.Common.Plugins.Type.ICartoButton)
            .Where(t => t is ICartoInitialButton)
            .OrderBy(t => t.SortOrder)
            .ToArray();

        _lastAccessed = (await Settings.GetLastAccessedDocuments());

        await SetAppScope(AppScope);
    });

    private void OnNodeExpandedChanged(TocTreeNode node, bool expanded) => base.Handle(() =>
    {
        node.Expanded = expanded;
    });

    async private Task LoadMap(MapFileItem mapFile)
    {
        _isLoadingMap = true;

        await base.ForceRenderComponent();
        await AppScope.LoadCartoDocumentAsync(mapFile.Path);

        _isLoadingMap = false;
    }

    private Task OnCheckboxClickedAsync(TocTreeNode node, bool isChecked) => base.HandleAsync(async () =>
    {
        node.Selected = isChecked;

        await EventBus.FireRefreshMapAsync(delay: 500);
    });

    private Task OnNodeClickAsync(TocTreeNode clickNode, MouseEventArgs e) => base.HandleAsync(async () =>
    {
        var isSelected = clickNode.IsSelected;

        foreach (var treeNode in _treeNodes)
        {
            treeNode.IsSelected = false;
            UnselectChildNodes(treeNode);
        }

        clickNode.IsSelected = !isSelected;

        if(AppScope is not null)
        {
            await AppScope.SetSelectedTocTreeNode(clickNode.IsSelected ? clickNode : null);
        }
    });

    private void StartEditLayerName(TocTreeNode node)
    {
        if(_editMapName)
        {
            CommitEditMapName();
        }

        _editNameTocNode = node;
        _editedName = node?.Text ?? "";
    }

    async private Task CommitEditLayerName()
    {
        if(_editNameTocNode is not null 
            && !String.IsNullOrEmpty(_editedName = _editedName.Trim()))
        {
            _editNameTocNode.Value!.Name = _editedName;
            _editNameTocNode = null;

            await Rebuild();
        } 
        else
        {
            _editNameTocNode = null;
        }
    }

    private Task StartEditMapName() => HandleAsync(async () =>
    {
        if (_editNameTocNode is not null)
        {
            await CommitEditLayerName();
        }

        _editMapName = true;
        _editedName = AppScope.Document.Map.Name;
    });

    private void CommitEditMapName()
    {
        if(_editMapName 
            && !String.IsNullOrEmpty(_editedName = _editedName.Trim()))
        {
            AppScope.Document.Map.Name = _editedName;
            _editMapName = false;
        }
    }

    async private Task OnShowRestorePointsAsync(string mxlFilePath)
    {
        var model = await AppScope.ShowModalDialog(
                typeof(RestoreMapDocumentDialog),
                $"Restore: {new FileInfo(mxlFilePath).Name}",
                new RestoreMapDocumentDialogModel()
                    {
                        MxlFilePath = mxlFilePath
                    }
        );

        if (!String.IsNullOrEmpty(model?.MxlFilePath)
            && !String.IsNullOrEmpty(model.RestorePointHash))
        {
            _isLoadingMap = true;

            await base.ForceRenderComponent();
            await AppScope.LoadRestorePointAsync(model.MxlFilePath, model.RestorePointHash);

            _isLoadingMap = false;
        }
    }

    #region Helper

    private void UnselectChildNodes(TocTreeNode tocTreeNode)
    {
        if(tocTreeNode.Children == null)
        {
            return;
        }

        foreach (TocTreeNode child in tocTreeNode.Children)
        {
            UnselectChildNodes(child);
            child.IsSelected = false;
        }
    }

    #endregion
}