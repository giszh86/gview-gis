@using Microsoft.AspNetCore.Components.Forms
@inherits ModalDialogFormBase<UploadFilesModel>

<ModalDialogFormBase T="UploadFilesModel"
                     OnDialogClose="base.OnDialogClose"
                     Model="base.Model">
    <DialogBody>
        
        <MudStack Style="width: 100%">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                               AppendMultipleFiles
                               OnFilesChanged="OnInputFileChanged"
                               Hidden="@false"
                               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                               InputStyle="opacity:0"
                               @ondragenter="@SetDragClass"
                               @ondragleave="@ClearDragClass"
                               @ondragend="@ClearDragClass">
                    <ButtonTemplate>
                    @if(_isUploading)
                    {
                        @foreach (var file in _files)
                        {
                            <MudText Typo="Typo.caption">@(file.Key.Name)</MudText>
                            <MudProgressLinear Color="Color.Info"
                                               Size="MudBlazor.Size.Medium"
                                               Max="file.Key.Size"
                                               Value="file.Value"
                                               Class="my-7" />
                        }
                    } 
                    else 
                    {
                        <MudPaper Height="300px"
                                  Outlined="true"
                                  Class="@_dragClass">
                            <MudText Typo="Typo.h6">
                                Drag and drop files here or click
                            </MudText>
                            @foreach (var file in _files.Keys)
                            {
                                <MudChip Color="Color.Dark" Text="@file.Name" />
                            }
                        </MudPaper>
                        
                        <MudToolBar DisableGutters="true"
                                    Class="relative d-flex justify-end gap-4 z-30">
                            <MudButton HtmlTag="label"
                                        Color="Color.Primary"
                                        for="@context.Id"
                                        Variant="Variant.Filled">
                                Open file picker
                            </MudButton>
                            <MudButton OnClick="@Upload"
                                        Color="Color.Primary"
                                        Disabled="@(!_files.Any())"
                                        Variant="Variant.Filled">
                                Upload
                            </MudButton>
                            <MudButton OnClick="@Clear"
                                        Color="Color.Error"
                                        Disabled="@(!_files.Any())"
                                        Variant="Variant.Filled">
                                Clear
                            </MudButton>
                        </MudToolBar>
                        
                    }
                    </ButtonTemplate>
                </MudFileUpload>
            
        </MudStack>
    </DialogBody>
    <DialogButtons>

    </DialogButtons>
</ModalDialogFormBase>

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private readonly Dictionary<IBrowserFile, long> _files = new();
    private bool _isUploading = false;

    private async Task Clear()
    {
        _files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _files.Add(file, 0);
        }
    }

    private Task Upload() => HandleAsync(async () =>
    {
        _isUploading = true;

        await base.ForceRenderComponent();

        var lastRefresh = DateTime.Now;

        try
        {
            foreach (var file in _files.Keys)
            {
                string filePath = System.IO.Path.Combine(Model.TargetFolder, file.Name);
                using var inputStream = file.OpenReadStream(long.MaxValue);

                const int bufferSize = 1024 * 1024 * 5; // 5MB Puffer

                using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None))
                using (var bufferedStream = new BufferedStream(fileStream, bufferSize))
                {
                    //await inputStream.CopyToAsync(bufferedStream);

                    byte[] buffer = new byte[bufferSize];
                    int bytesRead;
                    while ((bytesRead = await inputStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                    {
                        await bufferedStream.WriteAsync(buffer, 0, bytesRead);
                        _files[file] += bytesRead;

                        if ((DateTime.Now - lastRefresh).TotalSeconds > 2)
                        {
                            await base.ForceRenderComponent();
                            lastRefresh = DateTime.Now;
                        }
                    }
                }
            }

            await base.Submit();
        }
        finally
        {
            _isUploading = false;
        }
    });

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}