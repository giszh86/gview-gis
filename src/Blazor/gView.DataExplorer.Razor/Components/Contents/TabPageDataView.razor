@using gView.Framework.Core.Carto
@using gView.Framework.Data.Filters
@using gView.Blazor.Core

@inherits BaseHandler
@implements IAsyncDisposable
@inject LeafletService Leaflet
@inject GeoTransformerService GeoTransformer
@inject MapRenderService MapRenderer
@inject ExplorerEventBusService EventBus
@inject IExplorerApplicationScopeService AppScope

<div style="position:absolute;inset:0;overflow:hidden">
    @if (_mapControl is not null)
    {
        <div style="position:absolute;left:0px;right:0px;top:0px;bottom:calc(@(100-(int)_mapHeightPercent)% + 14px)">
            <LeafletMap Map="_mapControl" />
        </div>
    }
    <div class="dataview-divider" style="position:absolute;left:0px;right:0px;top:calc(@((int)_mapHeightPercent)% - 14px);height:28px;">
        @if(_mapHeightPercent != MapHeigts.Default) 
        {
           <MudIconButton Icon="@Icons.Material.Filled.Height"
                          OnClick="() => SetMapHeightPercent(MapHeigts.Default)" ></MudIconButton>
        }
        @if(_mapHeightPercent != MapHeigts.Max) 
        {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                           OnClick="() => SetMapHeightPercent(MapHeigts.Max)" ></MudIconButton>
        }
        @if(_mapHeightPercent != MapHeigts.Min) 
        {
           <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                          OnClick="() => SetMapHeightPercent(MapHeigts.Min)"></MudIconButton>
        }
    </div>
    @if(_currentDataTableLayer is not null)
    {
        <div class="data" style="position:absolute;left:0px;right:0px;bottom:0px;top:calc(@((int)_mapHeightPercent)% + 14px)">
            <TableBaseControl Layer="_currentDataTableLayer" ApplicationScope="AppScope"
                              OnSelectionChanged="() => MapRenderer.Rerender(DrawPhase.Selection, 100)"
                              OnZoomToClicked="(env) => HandleZoomToClickAsync(env)" 
                              OnSetWhereFilter="(filter) => HandleSetWhereClause(filter)">
                <CustomToolBarContent>
                    <MudSelect T="ILayer"
                       Value="_currentDataTableLayer"
                       ValueChanged="(layer) => OnSetCurrentDataLayer(layer)">
                            @foreach (var dataTableLayer in _dataTableLayers)
                            {
                                <MudSelectItem Value="dataTableLayer">@dataTableLayer.Title</MudSelectItem>
                            }
            </MudSelect>
                </CustomToolBarContent>
            </TableBaseControl>
        </div>
    }
</div>

@code {
    [Parameter] public IExplorerTabPage? FrameworkElement { get; set; }
    [Parameter] public IExplorerObject? CurrentExplorerObject { get; set; }

    public IExplorerTabPage? _currentFrameworkElement = null;
    public IExplorerObject? _currentExplorerObject = null;

    private LMap? _mapControl;
    private readonly DrawPhaseObjectDictionary<ImageLayer> _imageLayers = new();
    private List<ILayer> _dataTableLayers = new();
    private ILayer? _currentDataTableLayer;
    private ISpatialReference _mapSRef = new SpatialReference("epsg:3857");
    private ISpatialReference? _dataSpatialReference = null;

    private enum MapHeigts
    {
        Max = 90,
        Default = 50,
        Min = 10
    };
    private MapHeigts _mapHeightPercent = MapHeigts.Default;

    protected override Task OnInitializedAsync() => HandleAsync(async () =>
    {
        await base.OnInitializedAsync();

        MapRenderer.OnRefreshMapImage += HandleRefreshMapImage;
        EventBus.OnExplorerTabPageChanged += HandleExplorerTabPageChanged;
    });

    protected override Task OnParametersSetAsync() => HandleAsync(async () => 
    {
        await base.OnParametersSetAsync();

        if (_currentExplorerObject == CurrentExplorerObject &&
            _currentFrameworkElement == FrameworkElement)
        {
            return; // nothing changed, do not destry map control
        }

        _currentExplorerObject = CurrentExplorerObject;
        _currentFrameworkElement = FrameworkElement;

        await DestroyMapControl();  // if already exists

        if (FrameworkElement == null || CurrentExplorerObject == null)
        {
            return;
        }

        var dataInstance = await CurrentExplorerObject.GetInstanceAsync();
        if (dataInstance == null)
        {
            return;
        }

        var map = MapRenderer.CreateMap(_mapSRef);
        MapRenderer.InitMap(map);

        // IWebServiceClass? webServiceClass = null;
        // if (dataInstance is IWebFeatureClass && CurrentExplorerObject?.ParentExplorerObject != null)
        // {
        //     webServiceClass = (await CurrentExplorerObject.ParentExplorerObject.GetInstanceAsync()) as IWebServiceClass;
        // }

        _dataSpatialReference = dataInstance switch
        {
            IFeatureClass fClass => fClass.SpatialReference,
            IRasterClass rClass => rClass.SpatialReference,
            IWebServiceClass wClass => wClass.SpatialReference,
            IFeatureDataset fDataset => await fDataset.GetSpatialReference(),
            _ => null
        };

        if(_dataSpatialReference is null)
        {
            string dataInstanceName = dataInstance switch
            {
                IClass cls => $"Layer {cls.Name}",
                IDataset dataset => $"Dataset {dataset.DatasetName}",
                _ => ""
            };
            var model = await AppScope.ShowKnownDialog(
                    gView.Framework.Blazor.KnownDialogs.SpatialReferenceDialog,
                    $"{dataInstanceName} SRef is missing: Select a default",
                     new BaseDialogModel<ISpatialReference>()
                    {
                         Value = AppScope.GetCacheItem<ISpatialReference>("TabPageDataView_dataSpatialReference") ?? _mapSRef
                    }
                );

            if (model?.Value is not null)
            {
                _dataSpatialReference = model.Value;
                AppScope.SetCacheItem("TabPageDataView_dataSpatialReference", _dataSpatialReference);
                map.LayerDefaultSpatialReference = _dataSpatialReference;
            }
        }

        _ = dataInstance switch
        {
            //IWebFeatureClass => MapRenderer.AddWebFeatureClass((IWebFeatureClass)dataInstance, webServiceClass,
            IFeatureClass => MapRenderer.AddFeatureClass((IFeatureClass)dataInstance),
            IRasterClass => MapRenderer.AddRasterClass((IRasterClass)dataInstance),
            IWebServiceClass => MapRenderer.AddWebServiceClass((IWebServiceClass)dataInstance),
            IFeatureDataset => await MapRenderer.AddFeatureDataset((IFeatureDataset)dataInstance),
            _ => throw new GeneralException($"Can't show spatial data from {dataInstance.GetType()}")
        };

        _dataTableLayers.Clear();
        foreach(var datasetElement in map.MapElements)
        {
            if(datasetElement is IFeatureLayer featureLayer)
            {
                _dataTableLayers.Add(featureLayer);
            }
        }
        _currentDataTableLayer = _dataTableLayers.FirstOrDefault();

        await FrameworkElement.SetExplorerObjectAsync(CurrentExplorerObject);
        CreateMapControl();  
    });

    async private Task OnMapViewReset(object sender, Event e)
    {
        if (_mapControl == null)
        {
            return;
        }

        var bounds = await _mapControl.GetBounds();
        var size = await _mapControl.GetImageSize();

        DrawPhase.All.WithNormalized(async (drawPhase) =>
        {
            var imageLayer = _imageLayers.Get(drawPhase);

            if (imageLayer is null)
            {
                imageLayer = new ImageLayer("", bounds.SouthWest, bounds.NorthEast) { Opacity = 0.8f };
                await _mapControl.AddLayer(imageLayer);
                _imageLayers.Set(drawPhase, imageLayer);
            }
            else
            {
                await _mapControl.UpdateImageLayer(imageLayer, "", bounds.SouthWest, bounds.NorthEast);
            }
        });

        using (var mutex = await FuzzyMutexAsync.LockAsync(_mapControl.Id))
        {
            if (mutex.WasBlocked == false)
            {
                await HandleRefreshMapImage(null, null);

                await Task.Delay(300);

                var mapBounds = GeoTransformer.FromWGS84(new Envelope(bounds.SouthWest.Lng, bounds.SouthWest.Lat, bounds.NorthEast.Lng, bounds.NorthEast.Lat), _mapSRef).Envelope;
                MapRenderer.SetBoundsAndSize(mapBounds, size.Width, size.Height);
                await MapRenderer.Rerender();
            }
        }
    }

    private Task HandleRefreshMapImage(IMapRenderer? mapRenderer, byte[]? data)
    {
        if (_mapControl is not null)
        {
            _imageLayers.ForAny(
                mapRenderer is not null 
                    ? mapRenderer.DrawPhase
                    : DrawPhase.All, 
                async (imageLayer) =>
            {
                await _mapControl.UpdateImageLayer(imageLayer, $"data:image/png;base64, {Convert.ToBase64String(data ?? Array.Empty<byte>())}", null, null);
            });
        }

        return Task.CompletedTask;
    }

    private Task HandleExplorerTabPageChanged(IExplorerTabPage? newPage, IExplorerTabPage? oldPage)
    {
        if(oldPage == FrameworkElement)
        {
            MapRenderer.CancelRender();
        }

        return Task.CompletedTask;
    }

    private Task HandleZoomToClickAsync(IEnvelope zoomTo) => HandleAsync(async () =>
    {
        if(_mapControl is not null) 
        {
            var zoomToWgs84 = zoomTo.Srs switch
            {
                4326 => zoomTo.ToMinSize(),
                _ => GeoTransformer.ToWGS84(zoomTo, _mapSRef).Envelope.ToMinSize()
            };

            await _mapControl.FitBounds(
                new LatLng(zoomToWgs84.LowerLeft.Y, zoomToWgs84.LowerLeft.X),
                new LatLng(zoomToWgs84.UpperRight.Y, zoomToWgs84.UpperRight.X));
        }
    });

    private Task HandleSetWhereClause(string whereClause) => HandleAsync(() =>
    {
        if(_currentDataTableLayer is IFeatureLayer featureLayer)
        {
            featureLayer.FilterQuery = 
                String.IsNullOrEmpty(whereClause) 
                ? null
                : new QueryFilter()
                {
                    WhereClause = whereClause
                };

            return MapRenderer.Rerender(DrawPhase.All, 100);
        }

        return Task.CompletedTask;
    });

    #region Create/Intialize Map

    public void CreateMapControl()
    {
        _mapControl = Leaflet.CreateMap(_mapControl?.Id);
        _mapControl.OnIntialized += OnMapControlInitialized;

        //LeafletMap.OnViewReset += OnMapViewRest;
        _mapControl.OnZoomEnd += OnMapViewReset;
        _mapControl.OnMoveEnd += OnMapViewReset;
    }

    private Task OnMapControlInitialized() => HandleAsync(async () =>
    {
        IEnvelope? dataEnvelope = null;

        var exObject = FrameworkElement?.GetExplorerObject();
        if (exObject != null)
        {
            var instance = await exObject.GetInstanceAsync();

            dataEnvelope = instance switch
            {
                IFeatureClass fc => fc.Envelope,
                IRasterClass rc => rc.Polygon?.Envelope,
                IWebServiceClass wc => wc.Envelope,
                IFeatureDataset ds => await ds.Envelope(),
                _ => null
            };

        }
        await _mapControl!.AddLayer(new gView.Razor.Leaflet.Models.Layers.TileLayer()
        {
            UrlTemplate = "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
            Attribution = "&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors",
            Opacity = 0.5
        });

        IEnvelope? lMapBounds = null;
        if (_dataSpatialReference != null && dataEnvelope != null)
        {
            lMapBounds = GeoTransformer.ToWGS84(new Envelope(dataEnvelope), _dataSpatialReference).Envelope;
        }

        if (lMapBounds != null)
        {
            if (MapRenderer.BoundsIntialized())
            {
                var rendererBounds = GeoTransformer.ToWGS84(new Envelope(MapRenderer.Bounds), MapRenderer.SpatialReference).Envelope;
                if (lMapBounds.Contains(rendererBounds)) // stay in same Extent/Zoom
                {
                    lMapBounds = rendererBounds;
                }
            }

            await _mapControl.FitBounds(new LatLng(lMapBounds.LowerLeft.Y, lMapBounds.LowerLeft.X),
                                        new LatLng(lMapBounds.UpperRight.Y, lMapBounds.UpperRight.X));
        }
    });

    private Task SetMapHeightPercent(MapHeigts mapHeight)
    {
        if (_mapControl is not null)
        {
            _mapHeightPercent = mapHeight;

            Task.Factory.StartNew(async () =>
            {
                await Task.Delay(1000);
                await _mapControl.Refresh();
            });
        }

        return Task.CompletedTask;
    }

    #endregion


    #region Table

    private Task OnSetCurrentDataLayer(ILayer layer) => HandleAsync(async () =>
    {
        _currentDataTableLayer = null;
        await base.InvokeForceRenderComponent();
        _currentDataTableLayer = layer;

        await this.InvokeAsync(() => StateHasChanged());
    });

    #endregion

    #region Dispose / Destroy

    async public ValueTask DisposeAsync()
    {
        MapRenderer.OnRefreshMapImage -= HandleRefreshMapImage;
        EventBus.OnExplorerTabPageChanged -= HandleExplorerTabPageChanged;

        await DestroyMapControl();
    }

    async public ValueTask DestroyMapControl()
    {
        if (_mapControl != null)
        {
            _mapControl.OnIntialized -= OnMapControlInitialized;

            //LeafletMap.OnViewReset -= OnMapViewRest;
            _mapControl.OnZoomEnd -= OnMapViewReset;
            _mapControl.OnMoveEnd -= OnMapViewReset;

            await _mapControl.Destroy();

            _imageLayers.Clear(DrawPhase.All);
        }
    }

    #endregion
}