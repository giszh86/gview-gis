@inherits BaseHandler
@implements IDisposable
@inject IExplorerApplicationScopeService AppScope
@inject PluginManagerService PluginManager
@inject IconService Icons
@inject ExplorerEventBusService EventBus


<MudTreeView Items="TreeNodes" T="IExplorerObject"
             ExpandOnDoubleClick="true"
             SelectionMode="MudBlazor.SelectionMode.SingleSelection"
             Hover="true" Dense="true">
    <ItemTemplate>
        <div style="white-space:nowrap; overflow-x:hidden;" 
             class="treenode @((context == _selected) ? "selected" : "")">
            <MudTreeViewItem  Value="@context.Value"
                              Icon=@Icons.FromString(context.Value!.Icon!)
                              Items="@context.Children"
                              CanExpand="@context.HasChildren" 
                              Expanded="@context.Expanded"
                              ExpandedChanged="@((expanded) => OnNodeExpandedChanged((ExplorerTreeNode)context, expanded))"
                              Text="@(context.Text)"
                              OnClick="() => OnNodeClickAsync((ExplorerTreeNode)context)" >
            </MudTreeViewItem>
        </div>
    </ItemTemplate>
</MudTreeView>

@code {
    private List<ExplorerTreeNode> TreeNodes { get; set; } = new();
    private ExplorerTreeNode? _selected = null;

    protected override Task OnInitializedAsync() => HandleAsync(async () =>
    {
        // initialize tree
        _selected = new ExplorerTreeNode(AppScope.RootExplorerObject());
        TreeNodes.Add(_selected);
        await LoadServerData(_selected);
        _selected.Expanded = true;

        EventBus.OnSetCurrentExplorerObjectAsync += HandleSetCurrentExplorerObjectAsync;
        EventBus.OnRefreshContentAsync += OnRefreshContentAsync;
    });

    protected override Task OnAfterRenderAsync(bool firstRender) => HandleAsync(async () =>
    {
        if (firstRender && _selected != null)
        {
            await EventBus.FireCurrentExplorerObjectChanged(_selected?.Value);
        }
    });

    private Task OnNodeExpandedChanged(ExplorerTreeNode node, bool expanded) => base.HandleAsync(async () =>
    {
        await using (var busy = await AppScope.RegisterBusyTaskAsync($"Load: {node.Text}"))
        {
            node.Expanded = expanded;
            if (expanded)
            {
                await LoadServerData(node);
            }
        }
    });

    private Task OnNodeClickAsync(ExplorerTreeNode node) => base.HandleAsync(async () =>
    {
        await using (var busy = await AppScope.RegisterBusyTaskAsync($"Load: {node.Text}"))
        {
            if (node.IsServerLoaded == false)
            {
                await LoadServerData(node);
            }

            _selected = node;

            await RefreshCurrentNodeAsync();
            await EventBus.FireCurrentExplorerObjectChanged(node.Value);
        }
    });


    private Task OnRefreshContentAsync() => base.HandleAsync(async () =>
    {
        await using (var busy = await AppScope.RegisterBusyTaskAsync($"Refresh TreeView"))
        {
            if (await RefreshCurrentNodeAsync())
            {
                StateHasChanged();
            }
        }
    });

    private Task HandleSetCurrentExplorerObjectAsync(IExplorerObject? exObject) => base.HandleAsync(async () =>
    {
        await using (var busy = await AppScope.RegisterBusyTaskAsync($"Load: {exObject?.Name ?? String.Empty}"))
        {
            var exObjects = exObject?.GetAncestors(true);
            if (exObjects == null)
            {
                return;
            }

            var node = await SelectTreeNode(0, exObjects.ToArray());

            if (node != null)
            {
                _selected = node;

                if (await RefreshCurrentNodeAsync())
                {
                    _selected.Expanded = true;
                    StateHasChanged();
                }

                await OnNodeClickAsync(node);
            }
        }
    });

    private Task<bool> RefreshCurrentNodeAsync() => base.HandleFuncAsync(async () =>
    {
        if (_selected?.Value is not null && await _selected.Value.SecureRefreshAsync() == true)
        {
            _selected.Children = null;
            await LoadServerData(_selected);

            return true;
        }

        return false;
    });

    #region Tree 

    async private Task<ExplorerTreeNode?> SelectTreeNode(int index, IExplorerObject[] exObjects, ExplorerTreeNode? currentNode = null)
    {
        var treeNodes = currentNode is not null 
            ? currentNode.Children?.Cast<ExplorerTreeNode>()
            : TreeNodes;

        if (treeNodes == null)
        {
            return null;
        }

        currentNode = treeNodes.Where(t => t.Value?.FullName == exObjects[index].FullName &&  // Compare Fullname & type
                                           t.Value?.Type == exObjects[index].Type)            // there may be objects wih same name in folder, eg Images - one with MrSid and one with GDAL 
                                .FirstOrDefault();
        if(currentNode == null)
        {
            return null;
        }

        if (index == exObjects.Length - 1)
        {
            return currentNode;
        }

        if (currentNode.Children == null || currentNode.Children.Count() == 0)
        {
            await LoadServerData(currentNode);
        }

        currentNode.Expanded = true;

        return await SelectTreeNode(++index, exObjects, currentNode);
    }

    private ExplorerTreeNode? FindTreeNode(List<ExplorerTreeNode>? rootNodes, IExplorerObject exObject)
    {
        if (rootNodes == null)
        {
            return null;
        }

        foreach(var node in rootNodes)
        {
            if (node.Value?.FullName.Equals(exObject.FullName) == true)
            {
                return node;
            } 
            else
            {
                var childNode = FindTreeNode(
                    node.Children?.Select(n => (ExplorerTreeNode)n).ToList(), 
                    exObject);
                if(childNode!=null)
                {
                    return childNode;
                }
            }
        }

        return null;
    }

    #endregion

    private Task<IEnumerable<ExplorerTreeNode>?> LoadServerData(ExplorerTreeNode parentNode)
        => base.HandleFuncAsync<IEnumerable<ExplorerTreeNode>?>(async () =>
    {
        if (parentNode.IsServerLoaded)
        {
            return parentNode.Children?.Cast<ExplorerTreeNode>();
        }

        var exObject = parentNode.Value;

        parentNode.Children = new List<TreeItemData<IExplorerObject>>();

        if (exObject is IExplorerParentObject)
        {
            var exParent = (IExplorerParentObject)exObject;

            foreach (var childObject in (await exParent.ChildObjects()).OrderBy(c => c.Priority))
            {
                if (childObject is IExplorerObjectDoubleClick)  // don't show "new database connection" icons, etc. The are only visible in the content list
                {
                    continue;
                }
                parentNode.Children.Add(new ExplorerTreeNode(childObject));
            }
        }

        return parentNode.Children.Cast<ExplorerTreeNode>();
    });


    public void Dispose()
    {
        EventBus.OnSetCurrentExplorerObjectAsync -= HandleSetCurrentExplorerObjectAsync;
        EventBus.OnRefreshContentAsync -= OnRefreshContentAsync;
    }
}